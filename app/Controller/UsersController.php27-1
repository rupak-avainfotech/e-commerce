<?php

App::uses('AppController', 'Controller');
App::uses('CakeEmail', 'Network/Email');

class UsersController extends AppController {

////////////////////////////////////////////////////////////

    public function beforeFilter() {
        parent::beforeFilter();
        $this->Auth->allow('login', 'admin_add', 'api_login', 'api_registration', 'reset','api_useredit');
    }

////////////////////////////////////////////////////////////

    public function login() {
        // echo AuthComponent::password('admin');

        if ($this->request->is('post')) {
            //echo $this->request->data['User']['server'];exit;
            $sesid = $this->Session->id();
            if ($this->Auth->login()) {

                $this->User->id = $this->Auth->user('id');
                $this->User->saveField('logins', $this->Auth->user('logins') + 1);
                $this->User->saveField('last_login', date('Y-m-d H:i:s'));
                $this->loadModel('Cart');
                $updatesess = $this->Session->id();
                $this->Cart->updateAll(array('Cart.sessionid' => "'$updatesess'"), array('Cart.sessionid' => $sesid));
                if ($this->Auth->user('role') == 'customer') {
                    return $this->redirect('http://' . $this->request->data['User']['server']);
                } elseif ($this->Auth->user('role') == 'admin') {
                    $uploadURL = Router::url('/') . 'app/webroot/upload';
                    $_SESSION['KCFINDER'] = array(
                        'disabled' => false,
                        'uploadURL' => $uploadURL,
                        'uploadDir' => ''
                    );

                    return $this->redirect(array(
                                'controller' => 'dashboards',
                                'action' => 'dashboard',
                                'manager' => false,
                                'admin' => true
                    ));
                } else {
                    $this->Session->setFlash('Login is incorrect');
                    return $this->redirect('http://' . $this->request->data['User']['server']);
                }
            } else {
                $this->Session->setFlash('Login is incorrect');
                return $this->redirect('http://' . $this->request->data['User']['server']);
            }
        } else {

            return $this->redirect(array('controller' => 'shop', 'action' => 'index'));
        }
    }

////////////////////////////////////////////////////////////


    public function myaccount() {
        Configure::write("debug", 0);
        $uid = $this->Auth->user('id');
        if (empty($uid)) {
            return $this->redirect(array('controller' => 'shop', 'action' => 'index'));
        }
        if ($this->request->is("post")) {
            $image = $this->request->data['User']['image'];
            $uploadFolder = "profile_pic";
            //full path to upload folder
            $uploadPath = WWW_ROOT . '/files/' . $uploadFolder;
            //check if there wasn't errors uploading file on serwer
            if ($image['error'] == 0) {
                //image file name
                $imageName = $image['name'];
                //check if file exists in upload folder
                if (file_exists($uploadPath . DS . $imageName)) {
                    //create full filename with timestamp
                    $imageName = date('His') . $imageName;
                }
                //create full path with image
                $full_image_path = $uploadPath . DS . $imageName;
                move_uploaded_file($image['tmp_name'], $full_image_path);
                $this->User->updateAll(array('User.image' => "'$imageName'"), array('User.id' => $uid));
                return $this->redirect(array('action' => 'myaccount'));

                exit;
            }
        }
        $data = $this->User->find('first', array('conditions' => array('User.id' => $uid)));
        $this->set('data', $data);

        @$resultzz = $_REQUEST['result'];
        //echo 'ssssssssssssssssss';
        if ($resultzz == 'SUCCESS') {
            //echo 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';

            $this->loadModel("Wallet");
            $status = $this->Wallet->find('all', array('conditions' => array('Wallet.uid' => $uid), 'order' => 'Wallet.id DESC', 'limit' => 1));
            //print_r($status);
            $newwalletmoney = $status[0]['Wallet']['amount'];
            $walletmoneyid = $status[0]['Wallet']['id'];

            $userstatus = $this->User->find('all', array('conditions' => array('User.id' => $uid)));
            //print_r($userstatus);
            //echo '<br/>';
            $oldwalletmoney = $userstatus[0]['User']['loyalty_points'];
            @$totalwalletmoney = $newwalletmoney + $oldwalletmoney;
            $this->User->updateAll(array('User.loyalty_points' => $totalwalletmoney), array('User.id' => $uid));
            $this->Wallet->updateAll(array('Wallet.status' => 1), array('Wallet.uid' => $uid, 'Wallet.id' => $walletmoneyid));

            echo "<script>window.location='http://rupak.crystalbiltech.com/shop/users/myaccount'</script>";
            /* $val = $this->request->data['User']['money'];
              $this->request->data['User']['loyalty_points'] = $val;
              $save = $this->User->save($this->request->data); */
        }
    }

/////////////////////////////////////


    public function edit() {
        $id = $this->Auth->user('id');
        $this->User->id = $this->Auth->user('id');
        if (!$this->User->exists($id)) {
            return $this->redirect(array('action' => 'myaccount'));
        }
        if ($this->request->is('post') || $this->request->is('put')) {
            $email = $this->Auth->user('email');
            $username = $this->Auth->user('username');
            if (($email == $this->request->data['User']['email']) && ($username == $this->request->data['User']['username'])) {
                if ($this->User->save($this->request->data)) {
                    $this->Session->setFlash(__('Your profile has been updated.'));
                    return $this->redirect(array('action' => 'myaccount'));
                } else {
                    $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
                }
            } else if ($this->User->hasAny(array('User.email' => $this->request->data['User']['email']))) {
                $this->Session->setFlash(__('Email already exist!'));
                return $this->redirect(array('action' => 'edit'));
            } else if ($this->User->hasAny(array('User.username' => $this->request->data['User']['username']))) {
                $this->Session->setFlash(__('Username already exist!'));
                return $this->redirect(array('action' => 'edit'));
            } else {
                if ($this->User->save($this->request->data)) {
                    $this->Session->setFlash(__('Your profile has been updated.'));
                    return $this->redirect(array('action' => 'myaccount'));
                } else {
                    $this->Session->setFlash(__('The user could not be saved. Please, try again.'));
                }
            }
        } else {
            $options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
            $data = $this->request->data = $this->User->find('first', $options);
            $this->set('data', $data);
        }
    }

    ////////////////////////////
    
        public function api_useredit() {
            
          configure::write('debug', 0);
        $postdata = file_get_contents("php://input");
        $redata = json_decode($postdata);
        ob_start();
        print_r($redata);
        $c = ob_get_clean();
        $fc = fopen('files' . DS . 'detail.txt', 'w');
        fwrite($fc, $c);
        fclose($fc);
        $this->User->recursive = 2;
        $this->layout = "ajax";
        if (!empty($redata)) {
            $id = $redata->user->id;
            $name = $redata->user->name;
            $phone = $redata->user->phone;
            $zip = $redata->user->zip;
            $country = $redata->user->country;
            $state  = $redata->user->state;      
            $data = $this->User->updateAll(array('User.phone' => "'$phone'", 'User.name' => "'$name'", 'User.zip' => "'$zip'", 'User.country' => "'$country'", 'User.state' => "'$state'"), array('User.id' => $id));
            if ($data) {
                $response['msg'] = 'update successful';
                $response['data'] = $redata;
                $response['error'] = 0;
            }
        }
        echo json_encode($response);
        exit;
        
    }
    
    
    public function logout() {
        $this->Session->setFlash('Good-Bye');
        $_SESSION['KCEDITOR']['disabled'] = true;
        unset($_SESSION['KCEDITOR']);
        return $this->redirect($this->Auth->logout());
    }

    public function add() {

        Configure::write("debug", 0);
        if ($this->request->is('post')) {

            $this->request->data['User']['email'] = $this->request->data['User']['email'];

            $this->request->data['User']['active'] = 1;
            $this->request->data['User']['gender'] = $this->request->data['User']['gender'];
            $this->request->data['User']['birth'] = $this->request->data['User']['birth'];
            $this->request->data['User']['role'] = 'customer';
            if ($this->User->hasAny(array('User.username' => $this->request->data['User']['username']))) {
                $this->Session->setFlash(__('Username already exist!!!'));
                echo "<script>alert('Username already exist!!!')</script>";
                echo "<script>window.location.assign('http://rupak.crystalbiltech.com/shop/')</script>";
                //return $this->redirect('http://' . $this->request->data['User']['server']);
            }
            $this->User->create();
            $fu = $this->request->data;


            if ($this->User->save($this->request->data)) {

                $to = $this->request->data['User']['email'];
                $subject = "Welcome To register to our store";
                $txt = "Thanks for registration with us";
                $headers = "From: gurpreet@avainfotech.com";


                $mymail = mail($to, $subject, $txt, $headers);
                if ($mymail) {
                    echo "<script>alert('The user has been saved')</script>";
                    echo "<script>window.location.assign('http://rupak.crystalbiltech.com/shop/')</script>";
                }
            } else {
                //$this->Session->setFlash('The user could not be saved. Please, try again.');
                echo "<script>alert('The user could not be saved. Please, try again.')</script>";
                echo "<script>window.location.assign('http://rupak.crystalbiltech.com/shop/')</script>";
            }
        }
    }

////////////////////////////////////////////////////////////

    public function customer_dashboard() {
        
    }

////////////////////////////////////////////////////////////

    public function admin_dashboard() {
        
    }

////////////////////////////////////////////////////////////

    public function admin_index() {

        $this->Paginator = $this->Components->load('Paginator');

        $this->Paginator->settings = array(
            'User' => array(
                'recursive' => -1,
                'contain' => array(
                ),
                'conditions' => array(
                ),
                'order' => array(
                    'Users.name' => 'ASC'
                ),
                'limit' => 20,
                'paramType' => 'querystring',
            )
        );
        $users = $this->Paginator->paginate();
        $this->set(compact('users'));
    }

////////////////////////////////////////////////////////////

    public function admin_view($id = null) {
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException('Invalid user');
        }
        $this->set('user', $this->User->read(null, $id));
    }

////////////////////////////////////////////////////////////

    public function admin_add() {
        if ($this->request->is('post')) {
            $this->User->create();
            if ($this->User->save($this->request->data)) {
                $this->Session->setFlash('The user has been saved');
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash('The user could not be saved. Please, try again.');
            }
        }
    }

////////////////////////////////////////////////////////////

    public function admin_edit($id = null) {
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException('Invalid user');
        }
        if ($this->request->is('post') || $this->request->is('put')) {
            if ($this->User->save($this->request->data)) {
                $this->Session->setFlash('The user has been saved');
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash('The user could not be saved. Please, try again.');
            }
        } else {
            $this->request->data = $this->User->read(null, $id);
        }
    }

////////////////////////////////////////////////////////////

    public function admin_password($id = null) {
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException('Invalid user');
        }
        if ($this->request->is('post') || $this->request->is('put')) {
            if ($this->User->save($this->request->data)) {
                $this->Session->setFlash('The user has been saved');
                $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash('The user could not be saved. Please, try again.');
            }
        } else {
            $this->request->data = $this->User->read(null, $id);
        }
    }

////////////////////////////////////////////////////////////

    public function admin_delete($id = null) {
        if (!$this->request->is('post')) {
            throw new MethodNotAllowedException();
        }
        $this->User->id = $id;
        if (!$this->User->exists()) {
            throw new NotFoundException('Invalid user');
        }
        if ($this->User->delete()) {
            $this->Session->setFlash('User deleted');
            return $this->redirect(array('action' => 'index'));
        }
        $this->Session->setFlash('User was not deleted');
        return $this->redirect(array('action' => 'index'));
    }

    public function api_registration() {
        
        $this->layout = 'ajax';
        $postdata = file_get_contents("php://input");
        $redata = json_decode($postdata);
        ob_start();
        print_r($redata);
        $c = ob_get_clean();
        $fc = fopen('files' . DS . 'detail.txt', 'w');
        fwrite($fc, $c);
        fclose($fc);
      //  exit;
        
        $this->request->data['User']['name'] = $redata->first_name . " " . $redata->last_name;
        $this->request->data['User']['username'] = $redata->email ;
        $this->request->data['User']['email'] = $redata->email;
        $this->request->data['User']['password'] = $redata->password;
        $this->request->data['User']['phone'] = $redata->phone;
        $this->request->data['User']['active'] = 1;
        $this->request->data['User']['role'] = 'customer';


        if ($this->request->is('post')) {

            if ($this->User->hasAny(array('User.email' => $this->request->data['User']['email']))) {

                $response['msg'] = 'Email_id already exist';
            } elseif ($this->User->hasAny(array('User.username' => $this->request->data['User']['username']))) {

                $response['msg'] = 'username already exist';
            } else { 
                $this->User->create();
                $save=$this->User->save($this->request->data);
                if($save){
                $response['status'] = true;
                $response['msg'] = 'Registration has been successful';
                }else {
                  $response['status'] = true;
                $response['msg'] = '';  
                }
            }
        } else {

            $response['msg'] = 'Sorry please try again';
        }
        echo json_encode($response);
        exit;
    }

////////////////////////////////////////////////////////////
    public function api_login() {
        $postdata = file_get_contents("php://input");
        $redata = json_decode($postdata);
        ob_start();
        print_r($redata);
        $c = ob_get_clean();
        $fc = fopen('files' . DS . 'detail.txt', 'w');
        fwrite($fc, $c);
        fclose($fc);
        
        $this->layout = "ajax";
        $username   = $redata->User->username;
        $password   = $redata->User->password;
        $this->request->data['User']['username'] = $username;
        //$this->request->data['email'];        
        $this->request->data['password'] = $password;
        if ($redata) {
            $check = $this->User->find('first', array('conditions' => array(
                    "User.username" => $this->request->data['User']['username']
                ), 'fields' => array('username'), 'recursive' => '-1'));
            $this->request->data['User']['username'] = $check['User']['username'];
            $this->request->data['User']['password'] = $password;
            if (!$this->Auth->login()) {
                $response['isSucess'] = '1';
                $response['msg'] = 'User is not valid';
            } else {
                $user = $this->User->find('first', array('conditions' => array('id' => $this->Auth->user('id'))));
                $response['status'] = true;
                $response['msg'] = 'You have successfully logged in';
                $response['id'] = $user['User']['id'];
                $response['name'] = $user['User']['name'];
                $response['name'] = $user;
            }
        }
        echo json_encode($response);
        exit;
    }
    
    /////////////////////
    public function changepassword() {

        if ($this->request->is('post')) {
            $password = AuthComponent::password($this->data['User']['old_password']);
            $em = $this->Auth->user('username');
            $pass = $this->User->find('first', array('conditions' => array('AND' => array('User.password' => $password, 'User.username' => $em))));
            if ($pass) {
                if ($this->data['User']['new_password'] != $this->data['User']['cpassword']) {
                    $this->Session->setFlash(__("New password and Confirm password field do not match"));
                } else {
                    $this->User->data['User']['password'] = $this->data['User']['new_password'];
                    $this->User->id = $pass['User']['id'];
                    if ($this->User->exists()) {
                        $pass['User']['password'] = $this->data['User']['new_password'];
                        if ($this->User->save()) {
                            $this->Session->setFlash(__("Password Updated"));
                            $this->redirect(array('controller' => 'Users', 'action' => 'myaccount'));
                        }
                    }
                }
            } else {
                $this->Session->setFlash(__("Your old password did not match."));
            }
        }
    }

    ///////////////////

    public function reset($token = null) {
        configure::write('debug', 0);
        $this->User->recursive = -1;
        if (!empty($token)) {
            $u = $this->User->findBytokenhash($token);
            if ($u) {
                $this->User->id = $u['User']['id'];
                if (!empty($this->data)) {
                    if ($this->data['User']['password'] != $this->data['User']['password_confirm']) {
                        $this->Session->setFlash("Both the passwords are not matching...");
                        return;
                    }
                    $this->User->data = $this->data;
                    $this->User->data['User']['email'] = $u['User']['email'];
                    $new_hash = sha1($u['User']['email'] . rand(0, 100)); //created token
                    $this->User->data['User']['tokenhash'] = $new_hash;
                    if ($this->User->validates(array('fieldList' => array('password', 'password_confirm')))) {
                        if ($this->User->save($this->User->data)) {
                            $this->Session->setFlash('Password Has been Updated');
                            $this->redirect(array('controller' => 'Products', 'action' => 'index'));
                        }
                    } else {
                        $this->set('errors', $this->User->invalidFields());
                    }
                }
            } else {
                $this->Session->setFlash('Token Corrupted, Please Retry.the reset link 
                        <a style="cursor: pointer; color: rgb(0, 102, 0); text-decoration: none;
                        background: url("http://files.adbrite.com/mb/images/green-double-underline-006600.gif") 
                        repeat-x scroll center bottom transparent; margin-bottom: -2px; padding-bottom: 2px;"
                        name="AdBriteInlineAd_work" id="AdBriteInlineAd_work" target="_top">work</a> only for once.');
            }
        } else {
            $this->Session->setFlash('Pls try again...');
            $this->redirect(array('controller' => 'pages', 'action' => 'login'));
        }
    }

    //////////////////////////////

    public function forgetpwd() {
        Configure::write("debug", 0);
        $this->User->recursive = -1;
        if (!empty($this->data)) {
            if (empty($this->data['User']['username'])) {
                $this->Session->setFlash('Please Provide Your Username that You used to Register with Us');
            } else {
                $username = $this->data['User']['username'];
                $fu = $this->User->find('first', array('conditions' => array('User.username' => $username)));
                if ($fu['User']['email']) {
                    if ($fu['User']['active'] == "1") {

                        $key = Security::hash(CakeText::uuid(), 'sha512', true);

                        $hash = sha1($fu['User']['email'] . rand(0, 100));

                        $url = Router::url(array('controller' => 'Users', 'action' => 'reset'), true) . '/' . $key . '#' . $hash;

                        $ms = "<p>Click the Link below to reset your password.</p><br /> " . $url;
                        $fu['User']['tokenhash'] = $key;
                        $this->User->id = $fu['User']['id'];
                        if ($this->User->saveField('tokenhash', $fu['User']['tokenhash'])) {

                            $l = new CakeEmail('smtp');

                            $l->emailFormat('html')->template('default', 'default')->subject('Reset Your Password')
                                    ->to($fu['User']['email'])->send($ms);
                            $this->set('smtp_errors', "none");
                            $this->Session->setFlash(__('Check Your Email To Reset your password', true));
                            $this->redirect(array('controller' => 'shop', 'action' => 'index'));
                        } else {
                            $this->Session->setFlash("Error Generating Reset link");
                        }
                    } else {
                        $this->Session->setFlash('This Account is not Active yet.Check Your mail to activate it');
                    }
                } else {
                    $this->Session->setFlash('Username does Not Exist');
                }
            }
        }
    }

}
